sandpaper::serve()
source("setup.R")
source("setup.R")
sandpaper::serve()
sandpaper::serve()
sandpaper::reset_site()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
sandpaper::reset_site()
sandpaper::build_lesson()
sandpaper::reset_site()
sandpaper::serve()
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
sandpaper::serve()
sandpaper::serve()
sandpaper::serve()
sandpaper::serve()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
sandpaper::reset_site()
source("setup.R")
sandpaper::build_lesson()
sandpaper::serve()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
sandpaper::reset_site()
wd
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
sandpaper::reset_site()
sandpaper::serve()
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
sandpaper::serve()
source("setup.R")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
install.packages("rmarkdown")
install.packages("reticulate")
rmarkdown::render(
"path/to/01-data_frames_1.Rmd",
output_format = "rmarkdown::ipynb_notebook",
output_file = "01-data_frames_1.ipynb"
)
rmarkdown::render(
"episodes/01-data_frames_1.Rmd",
output_format = "rmarkdown::ipynb_notebook",
output_file = "01-data_frames_1.ipynb"
)
install.packages("reticulate")
install.packages("IRkernel")
IRkernel::installspec(user = FALSE)
rmarkdown::render(
"episodes/01-data_frames_1.Rmd",
output_format = "html_notebook",
output_file = "01-data_frames_1.ipynb"
)
library(reticulate)
use_python("/Users/Adam/L2DPythonEnv/bin/python3", required = TRUE)
library(reticulate)
py_config()
library(reticulate)
use_python("/opt/homebrew/bin/python3", required = TRUE)
py_config()
Sys.unsetenv("RETICULATE_PYTHON")
library(reticulate)
use_python("/opt/homebrew/bin/python3", required = TRUE)
py_config()
library(reticulate)
virtualenv_create("r-reticulate")
use_virtualenv("r-reticulate", required = TRUE)
library(reticulate)
virtualenv_create("r-reticulate")
use_virtualenv("r-reticulate", required = TRUE)
Sys.unsetenv("RETICULATE_PYTHON")
library(reticulate)
use_virtualenv("r-reticulate", required = TRUE)
py_config()
py_install(c("numpy", "pandas", "matplotlib"))
rmarkdown::render(
"episodes/01-data_frames_1.Rmd",
output_format = "html_notebook",
output_file = "01-data_frames_1.ipynb"
)
library(reticulate)
Sys.unsetenv("RETICULATE_PYTHON") # Clear any pre-set environment
use_virtualenv("r-reticulate", required = TRUE)
py_config()  # Verify that the correct Python version is active
rmarkdown::render(
"episodes/01-data_frames_1.Rmd",
output_format = "html_notebook",
output_file = "01-data_frames_1.ipynb"
)
library(reticulate)
use_python("/Users/Adam/L2DPythonEnv/bin/python3", required = TRUE)
py_config()
Sys.unsetenv("RETICULATE_PYTHON")
library(reticulate)
use_python("/Users/Adam/L2DPythonEnv/bin/python3", required = TRUE)
py_config() # Verify correct Python environment is being used
rmarkdown::render("episodes/01-data_frames_1.Rmd", output_format = "html_document")
rmarkdown::render("episodes/01-data_frames_1.Rmd", output_format = "html_notebook")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
rmarkdown::render(
input = "episodes/01-data_frames_1.Rmd",
output_format = "html_notebook",
output_file = "01-data_frames_1.ipynb",
output_dir = "site/built"
)
rmarkdown::render(
input = "episodes/01-data_frames_1.Rmd",
output_format = "rmarkdown::ipynb",
output_file = "01-data_frames_1.ipynb",
output_dir = "site/built"
)
install.packages("rmarkdown")
# Load necessary libraries
library(rmarkdown)
# Define paths and input/output settings
input_file <- "episodes/01-data_frames_1.Rmd"
output_file <- "01-data_frames_1.html"  # Intermediate file
final_ipynb <- "site/built/01-data_frames_1.ipynb"
# Render the R Markdown file to HTML Notebook
rmarkdown::render(
input = input_file,
output_format = "html_notebook",
output_file = output_file,
output_dir = "site/built"
)
# Convert the HTML Notebook to .ipynb using nbconvert
# Ensure the 'jupyter' command is available in your Python environment
system(paste(
"jupyter nbconvert --to notebook",
file.path("site/built", output_file),
"--output", final_ipynb
))
# Confirmation message
cat("Conversion complete! The Jupyter Notebook is saved at:", final_ipynb, "\n")
file.exists("site/built/01-data_frames_1.html")
# Load necessary libraries
library(rmarkdown)
# Define paths and input/output settings
input_file <- "episodes/01-data_frames_1.Rmd"
intermediate_html <- "site/built/01-data_frames_1.nb.html" # HTML Notebook output
final_ipynb <- "01-data_frames_1.ipynb" # Final Jupyter Notebook
output_dir <- "site/built"
# Render the R Markdown file to an HTML Notebook
render(
input = input_file,
output_format = "html_notebook",
output_file = basename(intermediate_html), # Use the correct intermediate file name
output_dir = dirname(intermediate_html)
)
# Check if intermediate HTML exists
if (!file.exists(intermediate_html)) {
stop("Intermediate HTML Notebook file was not created. Check the render step.")
}
# Convert the HTML Notebook to .ipynb using nbconvert
convert_command <- paste(
"jupyter nbconvert --to notebook",
intermediate_html,
"--output", final_ipynb,
"--output-dir", output_dir
)
system(convert_command)
# Verify the final output
final_path <- file.path(output_dir, final_ipynb)
if (file.exists(final_path)) {
cat("Conversion complete! The Jupyter Notebook is saved at:", final_path, "\n")
} else {
cat("Conversion failed. The .ipynb file was not created.\n")
}
install.packages("IRkernel")
IRkernel::installspec(user = FALSE)
Sys.unsetenv("RETICULATE_PYTHON")
library(reticulate)
use_python("<path_to_python>", required = TRUE)  # Example: "/Users/Adam/L2DPythonEnv/bin/python3"
Sys.unsetenv("RETICULATE_PYTHON")
library(reticulate)
use_python("</Users/Adam/.virtualenvs/r-reticulate/bin/python>", required = TRUE)  # Example: "/Users/Adam/L2DPythonEnv/bin/python3"
rmarkdown::render("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling/episodes/01-data_frames_1.Rmd", output_format = "html_notebook")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
library(reticulate)
# Explicitly specify the virtual environment
use_virtualenv("/Users/Adam/.virtualenvs/r-reticulate", required = TRUE)
library(reticulate)
# Explicitly specify the virtual environment
use_virtualenv("/Users/Adam/.virtualenvs/r-reticulate", required = TRUE)
# Check Python configuration
py_config()
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
rmarkdown::render(
input = "episodes/01-data_frames_1.Rmd",
output_format = "rmarkdown::ipynb_notebook",
output_file = "01-data_frames_1.ipynb",
output_dir = "site/built"
)
library(rmarkdown)
rmarkdown::render(
input = "episodes/01-data_frames_1.Rmd",
output_format = "html_notebook",
output_file = "01-data_frames_1.nb.html",
output_dir = "site/built"
)
rmarkdown::render(
input = "episodes/01-data_frames_1.Rmd",
output_format = "html_notebook", # Change to your desired notebook format
output_file = "01-data_frames_1.ipynb",
output_dir = "site/built"
)
library(rmarkdown)
rmarkdown::render(
input = "episodes/01-data_frames_1.Rmd",
output_format = "html_notebook",
output_file = "01-data_frames_1.nb.html", # Use intermediate HTML format
output_dir = "site/built"
)
sandpaper::reset_site()
source("setup.R")
library(rmarkdown)
rmarkdown::render(
input = "episodes/01-data_frames_1.Rmd",
output_format = "html_notebook",
output_file = "01-data_frames_1.nb.html", # Use intermediate HTML format
output_dir = "site/built"
)
library(reticulate)
# Unset RETICULATE_PYTHON to avoid conflicts with preloaded environments
Sys.unsetenv("RETICULATE_PYTHON")
# Detect the target output format
render_to_ipynb <- identical(knitr::opts_knit$get("rmarkdown.pandoc.to"), "html_notebook")
# Set the Python environment dynamically
if (render_to_ipynb) {
# Use the environment optimized for rendering .ipynb
use_virtualenv("/Users/Adam/.virtualenvs/r-reticulate", required = TRUE)
} else {
# Use the general-purpose Python environment for executing Python code
use_python("/Users/Adam/L2DPythonEnv/bin/python3", required = TRUE)
}
# Debugging: Print the active Python environment
cat("Active Python environment: ", Sys.getenv("RETICULATE_PYTHON"), "\n")
# Output Python configuration for debugging
tryCatch(
{
py_config()
},
error = function(e) {
cat("Python configuration error: ", e$message, "\n")
}
)
# Ensure `.ipynb` file is generated
if (render_to_ipynb) {
# Path settings
input_file <- knitr::current_input() # Get the current .Rmd file being processed
intermediate_html <- file.path("site/built", sub("\\.Rmd$", ".nb.html", basename(input_file))) # Intermediate .nb.html file
final_ipynb <- file.path("site/built", sub("\\.Rmd$", ".ipynb", basename(input_file))) # Final .ipynb file path
# Wait for the .nb.html to be created
if (!file.exists(intermediate_html)) {
stop("Intermediate HTML file not created. Check the render step.")
}
# Convert .nb.html to .ipynb using pandoc
convert_command <- paste(
"pandoc",
shQuote(intermediate_html),
"-f html -t ipynb",
"-o", shQuote(final_ipynb)
)
system(convert_command, ignore.stdout = TRUE, ignore.stderr = TRUE)
# Validate that the .ipynb file was created
if (!file.exists(final_ipynb)) {
stop("Conversion failed. The .ipynb file was not created.")
} else {
cat("Successfully created:", final_ipynb, "\n")
}
}
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
# Check which Pandoc is being used in R
rmarkdown::pandoc_version()
Sys.getenv("RSTUDIO_PANDOC") # RStudio's internal Pandoc
Sys.which("pandoc")          # System-wide Pandoc
Sys.setenv(RSTUDIO_PANDOC = "/opt/homebrew/bin/pandoc")
library(rmarkdown)
input_file <- "episodes/01-data_frames_1.Rmd"
intermediate_file <- "site/built/01-data_frames_1.nb.html"
output_ipynb <- "site/built/01-data_frames_1.ipynb"
# Render to the intermediate HTML notebook
rmarkdown::render(
input = input_file,
output_format = "html_notebook",
output_file = basename(intermediate_file),
output_dir = dirname(intermediate_file)
)
# Convert the intermediate file to .ipynb
if (file.exists(intermediate_file)) {
system(glue::glue(
"pandoc {shQuote(intermediate_file)} -f html -t ipynb -o {shQuote(output_ipynb)}"
))
} else {
stop("Failed to generate intermediate HTML file")
}
sandpaper::reset_site()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
sandpaper::reset_site()
source("setup.R")
sandpaper::reset_site()
source("setup.R")
sandpaper::reset_site()
sandpaper::reset_site()
source("setup.R")
knitr::opts_chunk$set(error = TRUE)
sandpaper::reset_site()
source("setup.R")
sandpaper::reset_site()
source("setup.R")
sandpaper::reset_site()
reticulate::py_config()
# Install nibabel into the active virtual environment
reticulate::py_install("nibabel")
reticulate::py_module_available("nibabel")
source("setup.R")
sandpaper::reset_site()
reticulate::py_run_string("from PIL import Image; Image.MAX_IMAGE_PIXELS = None")
source("setup.R")
sandpaper::serve()
sandpaper::(serve)
sandpaper::serve()
sandpaper::reset_site()
cd /Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/to_publish/Data_Handling
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
sandpaper::reset_site()
source("setup.R")
library(reticulate)
Sys.unsetenv("RETICULATE_PYTHON")
use_python("/Users/Adam/.virtualenvs/r-reticulate/bin/python3", required = TRUE)
py_config()
source("setup.R")
source("setup.R")
source("setup.R")
sandpaper::reset_site()
source("setup.R")
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
sandpaper::reset_site()
source("setup.R")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
sandpaper::reset_site()
source("setup.R")
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
source("setup.R")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
source(“setup.R”)
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
sandpaper::reset_site()
source(“setup.R”)
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
source("setup.R")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
source("setup.R")
source("setup.R")
source("setup.R")
Sys.unsetenv("RETICULATE_PYTHON")
use_virtualenv("/Users/Adam/.virtualenvs/r-reticulate", required = TRUE)
py_run_string("import numpy; print(numpy.__version__, numpy.__file__)")
source("setup.R")
setwd("/Users/Adam/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling")
sandpaper::reset_site()
source(“setup.R”)
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
sandpaper::reset_site()
setwd("/Users/Adam/Documents/L2D_GitHub/Data_Handling")
setwd("~/Documents/L2D_GitHub/Sandpaper_Maintenance/Data_Handling/")
sandpaper::reset_site()
source("setup.R")
sandpaper::serve()
library(reticulate)
# Debugging: Output current Python environment
cat("Initial Python environment: ", Sys.getenv("RETICULATE_PYTHON"), "\n")
# Unset any previously set Python environments to avoid conflicts
Sys.unsetenv("RETICULATE_PYTHON")
# Check if Pandoc is available and validate the path
if (!file.exists("/opt/homebrew/bin/pandoc")) {
stop("Pandoc is not found. Please install Pandoc or update the path.")
} else {
cat("Pandoc is available at: /opt/homebrew/bin/pandoc\n")
}
# Attempt to set the Python environment using the desired virtualenv
tryCatch({
use_virtualenv("/Users/Adam/.virtualenvs/r-reticulate", required = TRUE)
cat("Python virtual environment set successfully.\n")
}, error = function(e) {
cat("Error setting Python virtual environment:", e$message, "\n")
stop("Failed to set Python virtual environment.")
})
# Debugging: Validate the Python environment and its configuration
tryCatch({
py_config()  # Validate Python environment
py_run_string("import numpy")  # Check for numpy availability
cat("Python environment and numpy are correctly configured.\n")
}, error = function(e) {
cat("Error in Python environment configuration or numpy check:", e$message, "\n")
stop("Failed to validate Python environment.")
})
# Configure knitr options to ensure consistent execution and rendering
knitr::opts_chunk$set(
eval = TRUE,
echo = TRUE,
message = FALSE,
warning = FALSE,
results = 'hold'  # Better than 'asis' for Python chunks
)
# Debugging: Output final Python environment details
cat("Final Python environment: ", Sys.getenv("RETICULATE_PYTHON"), "\n")
cat("Final Python configuration during rendering:\n")
py_config()
cat("Setup chunk complete.\n")
reticulate::repl_python()
